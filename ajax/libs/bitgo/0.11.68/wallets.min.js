var ECKey=require("bitcoinjs-lib/src/eckey"),Wallet=require("./wallet"),common=require("./common"),HDNode=require("./hdnode"),networks=require("bitcoinjs-lib/src/networks"),Util=require("./util"),Q=require("q"),Wallets=function(e){this.bitgo=e};Wallets.prototype.list=function(e,t){e=e||{},common.validateParams(e,[],[],t);var r=[];if(e.skip&&e.prevId)throw new Error("cannot specify both skip and prevId");if(e.limit){if("number"!=typeof e.limit)throw new Error("invalid limit argument, expecting number");r.push("limit="+e.limit)}if(e.skip){if("number"!=typeof e.skip)throw new Error("invalid skip argument, expecting number");r.push("skip="+e.skip)}else e.prevId&&r.push("prevId="+e.prevId);var a="";r.length&&(a="?"+r.join("&"));var i=this;return this.bitgo.get(this.bitgo.url("/wallet"+a)).result().then(function(e){return e.wallets=e.wallets.map(function(e){return new Wallet(i.bitgo,e)}),e}).nodeify(t)},Wallets.prototype.getWallet=function(e,t){e=e||{},common.validateParams(e,["id"],[],t);var r=this,a="";return e.gpk&&(a="?gpk=1"),this.bitgo.get(this.bitgo.url("/wallet/"+e.id+a)).result().then(function(e){return new Wallet(r.bitgo,e)}).nodeify(t)},Wallets.prototype.listShares=function(e,t){e=e||{},common.validateParams(e,[],[],t);return this.bitgo.get(this.bitgo.url("/walletshare")).result().nodeify(t)},Wallets.prototype.getShare=function(e,t){return e=e||{},common.validateParams(e,["walletShareId"],[],t),this.bitgo.get(this.bitgo.url("/walletshare/"+e.walletShareId)).result().nodeify(t)},Wallets.prototype.updateShare=function(e,t){return e=e||{},common.validateParams(e,["walletShareId"],[],t),this.bitgo.post(this.bitgo.url("/walletshare/"+e.walletShareId)).send(e).result().nodeify(t)},Wallets.prototype.cancelShare=function(e,t){return e=e||{},common.validateParams(e,["walletShareId"],[],t),this.bitgo.del(this.bitgo.url("/walletshare/"+e.walletShareId)).send().result().nodeify(t)},Wallets.prototype.acceptShare=function(e,t){e=e||{},common.validateParams(e,["walletShareId"],["overrideEncryptedXprv"],t);var r=this,a=e.overrideEncryptedXprv;return this.getShare({walletShareId:e.walletShareId}).then(function(t){if(!t.keychain||!t.keychain.encryptedXprv||a)return t;if(!e.userPassword)throw new Error("userPassword param must be provided to decrypt shared key");return r.bitgo.getECDHSharingKeychain().then(function(i){if(!i.encryptedXprv)throw new Error("EncryptedXprv was not found on sharing keychain");i.xprv=r.bitgo.decrypt({password:e.userPassword,input:i.encryptedXprv});var n=HDNode.fromBase58(i.xprv),o=n.deriveFromPath(t.keychain.path),s=r.bitgo.getECDHSecret({eckey:o.privKey,otherPubKeyHex:t.keychain.fromPubKey}),l=r.bitgo.decrypt({password:s,input:t.keychain.encryptedXprv}),p=e.newWalletPassphrase||e.userPassword;return a=r.bitgo.encrypt({password:p,input:l}),t})}).then(function(t){var i={walletShareId:e.walletShareId,state:"accepted"};return a&&(i.encryptedXprv=a),r.updateShare(i)}).nodeify(t)},Wallets.prototype.createKey=function(e){e=e||{},common.validateParams(e);var t=common.getNetwork();t=networks[t];var r=ECKey.makeRandom();return{address:r.pub.getAddress(t),key:r.toWIF(t)}},Wallets.prototype.createWalletWithKeychains=function(e,t){e=e||{},common.validateParams(e,["passphrase"],["label","backupXpub","enterprise"],t);var r=this,a=e.label,i=this.bitgo.keychains().create();if(i.encryptedXprv=this.bitgo.encrypt({password:e.passphrase,input:i.xprv}),!!e.backupXpub+!!e.backupXpubProvider>1)throw new Error("Cannot provide more than one backupXpub or backupXpubProvider flag");var n,o;return r.bitgo.keychains().add({xpub:i.xpub,encryptedXprv:i.encryptedXprv}).then(function(){return e.backupXpubProvider?r.bitgo.keychains().createBackup({provider:e.backupXpubProvider}).then(function(e){n=e}):(n=e.backupXpub?{xpub:e.backupXpub}:r.bitgo.keychains().create(),r.bitgo.keychains().add(n))}).then(function(){return r.bitgo.keychains().createBitGo()}).then(function(t){o=t;var s={label:a,m:2,n:3,keychains:[{xpub:i.xpub},{xpub:n.xpub},{xpub:o.xpub}]};return e.enterprise&&(s.enterprise=e.enterprise),r.add(s)}).then(function(e){var t={wallet:e,userKeychain:i,backupKeychain:n,bitgoKeychain:o};return n.xprv&&(t.warning="Be sure to backup the backup keychain -- it is not stored anywhere else!"),t}).nodeify(t)},Wallets.prototype.createForwardWallet=function(e,t){if(e=e||{},common.validateParams(e,["privKey","sourceAddress"],["label"],t),!e.destinationWallet||"object"!=typeof e.destinationWallet||!e.destinationWallet.id)throw new Error("expecting destinationWallet object");var r,a,i=this;try{var n=new ECKey.fromWIF(e.privKey),o=networks[common.getNetwork()];a=n.pub.getAddress(o).toBase58Check()}catch(s){throw new Error("expecting a valid privKey")}if(a!==e.sourceAddress)throw new Error("privKey does not match source address - got "+a+" expected "+e.sourceAddress);return e.destinationWallet.createAddress().then(function(a){r=a.address;var n={type:"forward",sourceAddress:e.sourceAddress,destinationAddress:r,privKey:e.privKey,label:e.label};return e.enterprise&&(n.enterprise=e.enterprise),i.bitgo.post(i.bitgo.url("/wallet")).send(n).result().nodeify(t)})},Wallets.prototype.add=function(e,t){if(e=e||{},common.validateParams(e,[],["label","enterprise"],t),Array.isArray(e.keychains)===!1||"number"!=typeof e.m||"number"!=typeof e.n)throw new Error("invalid argument");if(2!=e.m||3!=e.n)throw new Error("unsupported multi-sig type");var r=this,a=e.keychains.map(function(e){return{xpub:e.xpub}}),i={label:e.label,m:e.m,n:e.n,keychains:a};return e.enterprise&&(i.enterprise=e.enterprise),this.bitgo.post(this.bitgo.url("/wallet")).send(i).result().then(function(e){return new Wallet(r.bitgo,e)}).nodeify(t)},Wallets.prototype.get=function(e,t){return this.getWallet(e,t)},Wallets.prototype.remove=function(e,t){e=e||{},common.validateParams(e,["id"],[],t);return this.bitgo.del(this.bitgo.url("/wallet/"+e.id)).result().nodeify(t)},module.exports=Wallets;